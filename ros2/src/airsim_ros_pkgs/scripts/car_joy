#!/usr/bin/env python3

#capture joystick events using ROS and convert to AirSim Car API commands
#to enable:
# rosrun joy joy_node

import rclpy
from rclpy.node import Node
import threading
import sensor_msgs
import sensor_msgs.msg
import std_msgs
import std_msgs.msg
from sensor_msgs.msg import Joy
from std_msgs.msg import Header
from std_msgs.msg import Int32
from std_msgs.msg import String

from airsim_interfaces.msg import CarControls

# import airsim_interfaces.msg as airsim


class CarCommandTranslator(Node):
    def __init__(self):
        super().__init__('car_joy')
        self.lock = threading.Lock()
        self.last_forward_btn = 0
        self.last_reverse_btn = 0
        self.last_neutral_btn = 0
        self.last_park_btn = 0
        self.last_shift_down_btn = 0
        self.last_shift_up_btn = 0
        self.parked = True
        self.last_gear = 0
        self.shift_mode_manual = True

        self.declare_parameters(
            namespace='',
            parameters=[
                ('update_rate_hz', 20.0),
                ('max_curvature', 0.75),
                ('steer_sign', -1),
                ('throttle_brake_sign', 1),
                ('auto_gear_max', 5),
                ('manual_transmission', True),
                ('forward_button_index', 0),
                ('reverse_button_index', 1),
                ('neutral_button_index', 3),
                ('park_button_index', 4),
                ('shift_down_index', 6),
                ('shift_up_index', 7),
                ('throttle_axis_index', 1),
                ('steering_axis_index', 0),
                ('car_control_topic', 'airsim_node/Car1/car_cmd')
            ])

        update_rate_hz = self.get_parameter('update_rate_hz').value
        self.max_curvature = self.get_parameter('max_curvature').value
        self.steer_sign = self.get_parameter('steer_sign').value
        self.throttle_brake_sign = self.get_parameter('throttle_brake_sign').value
        self.auto_gear_max = self.get_parameter('auto_gear_max').value
        self.manual_transmission = self.get_parameter('manual_transmission').value
        self.forward_button_index = self.get_parameter('forward_button_index').value
        self.reverse_button_index = self.get_parameter('reverse_button_index').value
        self.neutral_button_index = self.get_parameter('neutral_button_index').value
        self.park_button_index = self.get_parameter('park_button_index').value
        self.shift_down_index = self.get_parameter('shift_down_index').value
        self.shift_up_index = self.get_parameter('shift_up_index').value
        self.throttle_axis_index = self.get_parameter('throttle_axis_index').value
        self.steering_axis_index = self.get_parameter('steering_axis_index').value
        self.car_control_topic = self.get_parameter('car_control_topic').value

        self.joy_msg = None

        self.joy_sub = self.create_subscription(
            Joy,
            'joy',
            self.handle_joy,
            0
        )

        self.command_pub_ = self.create_publisher(
            CarControls,
            self.car_control_topic,
            10
        )

        self.test_pub_ = self.create_publisher(
            String,
            'testTopic',
            10
        )


        self.update_time = self.create_timer(
            1.0/update_rate_hz,
            self.handle_update_timer
        )

    def handle_joy(self, msg):
        with self.lock:
            self.joy_msg = msg

    def handle_update_timer(self):
        joy = None

        with self.lock:
            joy = self.joy_msg

        if joy is None:
            return

        controls = CarControls()
        controls.steering = self.steer_sign * self.max_curvature * joy.axes[self.steering_axis_index]
        u = joy.axes[self.throttle_axis_index] * self.throttle_brake_sign
        if u > 0.0:
            controls.throttle = abs(u)
            controls.brake = 0.0
        else:
            controls.throttle = 0.0
            controls.brake = abs(u)      

        forward_btn    = joy.buttons[self.forward_button_index]
        reverse_btn    = joy.buttons[self.reverse_button_index]
        neutral_btn    = joy.buttons[self.neutral_button_index]
        park_btn       = joy.buttons[self.park_button_index]
        shift_up_btn   = joy.buttons[self.shift_up_index]
        shift_down_btn = joy.buttons[self.shift_down_index]
        

        # gearing: -1 reverse, 0 N, >= 1 drive
        controls.manual = True #set to False for automatic transmission along with manual_gear > 1
        if not self.last_neutral_btn and neutral_btn:
            self.last_gear = 0
            self.parked = False
            controls.manual = True
        elif not self.last_forward_btn and forward_btn:
            if self.manual_transmission:
                self.last_gear = 1
                self.shift_mode_manual = True
            else:
                self.shift_mode_manual = False
                self.last_gear = self.auto_gear_max

            self.parked = False
        elif not self.last_reverse_btn and reverse_btn:
            self.last_gear = -1
            self.parked = False
            self.shift_mode_manual = True
        elif not self.last_park_btn and park_btn:
            self.parked = True
        elif not self.last_shift_down_btn and shift_down_btn and self.last_gear > 1 and self.manual_transmission:
            self.last_gear-=1
            self.parked = False
            self.shift_mode_manual = True
        elif not self.last_shift_up_btn and shift_up_btn and self.last_gear >= 1 and self.manual_transmission:
            self.last_gear+=1
            self.parked = False
            self.shift_mode_manual = True

        if self.parked:
            self.last_gear = 0
            self.shift_mode_manual = True
            controls.handbrake = True
        else:
            controls.handbrake = False

        controls.manual_gear = self.last_gear
        controls.manual = self.shift_mode_manual


        now = self.get_clock().now()
        header = Header()
        header.stamp = now.to_msg()
        controls.header = header


        controls.gear_immediate = True

        self.last_neutral_btn = neutral_btn
        self.last_forward_btn = forward_btn
        self.last_reverse_btn = reverse_btn
        self.last_park_btn = park_btn
        self.last_shift_down_btn = shift_down_btn
        self.last_shift_up_btn = shift_up_btn


        self.command_pub_.publish(controls)

        msg = String()
        msg.data = 'Hello World'
        self.test_pub_.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = CarCommandTranslator()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
